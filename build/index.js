// @bun
import a from"fs";import{availableParallelism as b} from"os";import{join as l} from"path";import{parseArgs as x} from"util";import{Worker as R,workerData as f} from"worker_threads";var __filename="/home/ubuntu/Bunginx/index.ts";if(Bun.isMainThread){const r=x({args:Bun.argv.slice(2),options:{port:{type:"string",default:process.env.PORT||"8000",short:"p"},cluster:{type:"string",default:b().toString(),short:"c"},help:{type:"boolean",short:"h"},debug:{type:"boolean",short:"d"}},allowPositionals:!0}),u=parseInt(`${r?.values?.cluster}`),o=parseInt(`${r?.values?.port}`);if(!u||Number.isNaN(u))console.error("Cluster thread count must be number [--cluster | -c]"),process.exit(1);if(!o||Number.isNaN(o))console.error("Port must be number [--port | -p]"),process.exit(1);if(r.values.help)console.log("Bunginx: Fast, lightweight, simple HTTP file server\n","bunginx [-pdhc] [--port <port>] [--cluster <count>] [--debug] [cwd]\n","--port <port: number>      Set the port for Bunginx [-p]\n","                           - defaults to $PORT or 8000.\n","--cluster <count: number>  Set the threads that Bunginx will spawn [-c]\n","                           - defaults to the CPU core count.\n","--debug                    Display debug messages during run [-d]\n","--help                     Display this message [-h]\n","[cwd: string]              Directory that Bunginx will run on,\n","                           - defaults to current directory."),process.exit();const c=r?.positionals.join(" "),h=!!r?.values.debug;console.log("Serving"+(c?" "+c:""),"with",u,"threads at port",o);for(let d=0;d<u;d++){const e=new R(__filename,{workerData:{port:o,id:d,cwd:c||process.cwd(),debug:h}})}}else{let d=function(e,t){const i=Math.max(...e.map((n)=>n.name.length))+5,w=e.sort((n,s)=>s.priority-n.priority||n.name.localeCompare(s.name)).map((n)=>`<a id="a" href="${l(t,n.name)}">${n.name.padEnd(i," ")} | ${n.type}</a><br>`);return`${t==="/"?"":`<a href="${l(t,"..")}"><=</a>`} <a id="header">${t}:</a><br>${w.join("")}${h}`};const r=f?.cwd,u=f?.debug;g="Unknown Origin",Bun.serve({async fetch(e){const t=new URL(e.url);g=t?.pathname;const i=await c(decodeURIComponent(t.pathname));if(u)console.debug(`[w${f.id}|${i.status}] ${t?.pathname}`);return i},error(e){return new Response(`${g}: ${e}`,{status:500})},reusePort:!0,port:f?.port});const o=Bun.file(r+"404.html");async function c(e){const t=l(r,e);if(!t.startsWith(r)||t.includes(".."))return new Response(e+": 404 Not Found",{status:404});if(!a.existsSync(t)){if(await o.exists())return new Response(o,{status:404,headers:new Headers({"Content-Type":"text/html"})});return new Response(e+": 404 Not Found",{status:404})}const i=a.lstatSync(t);if(await Bun.file(l(t,"index.html")).exists()){if(!e.endsWith("/"))return new Response("",{status:307,headers:new Headers({Location:l(e,"/")})});return await c(l(e,"index.html"))}if(i.isDirectory()){const n=a.readdirSync(t,{withFileTypes:!0}).map((s)=>{let p="Unknown",m=0;if(s.isDirectory()){if(p="Directory",m=3,a.existsSync(l(s.name,"index.html")))p="Website",m=4}if(s.isFile()){const y=s.name.split(".").slice(1);if(!y.length)p="File";else p=y.join(".").toUpperCase()+" file";m=2}if(s.isSymbolicLink())p="Symlink",m=1;return{name:s.name,type:p,priority:m}});return new Response(d(n,e),{status:200,headers:new Headers({"Content-Type":"text/html"})})}else{if(i.mode&(a.constants.S_IRUSR|a.constants.S_IRGRP|a.constants.S_IROTH))return new Response(Bun.file(t));return new Response(e+": 403 Forbidden",{status:403})}}const h='<hr><a id="footer">Bunginx | Fast, lightweight, simple HTTP file server<br>Dreamnity inc. 2024</a><style>#footer{font-size:smaller;}#header{font-weight:bold;}#a{white-space:break-spaces;font-family:monospace}*{text-decoration:none}</style>'}var g;
