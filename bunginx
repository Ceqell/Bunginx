#!/usr/bin/env -S bun
// @bun
import M from"fs";import{availableParallelism as $} from"os";import{join as N} from"path";import{parseArgs as A} from"util";import{Worker as V,workerData as T} from"worker_threads";var __filename="/home/ubuntu/Bunginx/index.ts";if(Bun.isMainThread){const G=A({args:Bun.argv.slice(2),options:{port:{type:"string",default:process.env.PORT||"8000",short:"p"},cluster:{type:"string",default:$().toString(),short:"c"},help:{type:"boolean",short:"h"},debug:{type:"boolean",short:"d"}},allowPositionals:!0}),I=parseInt(`${G?.values?.cluster}`),J=parseInt(`${G?.values?.port}`);if(!I||Number.isNaN(I))console.error("Cluster thread count must be number [--cluster | -c]"),process.exit(1);if(!J||Number.isNaN(J))console.error("Port must be number [--port | -p]"),process.exit(1);if(G.values.help)console.log("Bunginx: Fast, lightweight, simple HTTP file server\n","bunginx [-pdhc] [--port <port>] [--cluster <count>] [--debug] [cwd]\n","--port <port: number>      Set the port for Bunginx [-p]\n","                           - defaults to $PORT or 8000.\n","--cluster <count: number>  Set the threads that Bunginx will spawn [-c]\n","                           - defaults to the CPU core count.\n","--debug                    Display debug messages during run [-d]\n","--help                     Display this message [-h]\n","[cwd: string]              Directory that Bunginx will run on,\n","                           - defaults to current directory."),process.exit();const O=G?.positionals.join(" "),U=!!G?.values.debug;console.log("Bunginx v37DE4B\n");for(let R=0;R<I;R++){const z=new V(process.argv[1]||__filename,{workerData:{port:J,id:R,cwd:O||process.cwd(),debug:U}})}console.log("Serving"+(O?" "+O:""),"with",I,"threads at port",J)}else{let R=function(z,B){const K=Math.max(...z.map((E)=>E.name.length))+5,Y=z.sort((E,H)=>H.priority-E.priority||E.name.localeCompare(H.name)).map((E)=>`<a id="a" href="${N(B,E.name)}">${E.name.padEnd(K," ")} | ${E.type}</a><br>`);return`${B==="/"?"":`<a href="${N(B,"..")}"><=</a>`} <a id="header">${B}:</a><br>${Y.join("")}${U}`};const G=T?.cwd,I=T?.debug;if(X="Unknown Origin",Bun.serve({async fetch(z){const B=new URL(z.url);X=B?.pathname;const K=await O(decodeURIComponent(B.pathname));if(I)console.debug(`[w${T.id}|${K.status}] ${B?.pathname}`);return K},error(z){return new Response(`${X}: ${z}`,{status:500})},reusePort:!0,port:T?.port}),I)console.log(`[w${T.id}] Online.`);const J=Bun.file(G+"404.html");async function O(z){const B=N(G,z);if(!B.startsWith(G)||B.includes(".."))return new Response(z+": 404 Not Found",{status:404});if(!M.existsSync(B)){if(await J.exists())return new Response(J,{status:404,headers:new Headers({"Content-Type":"text/html"})});return new Response(z+": 404 Not Found",{status:404})}const K=M.lstatSync(B);if(await Bun.file(N(B,"index.html")).exists()){if(!z.endsWith("/"))return new Response("",{status:307,headers:new Headers({Location:N(z,"/")})});return await O(N(z,"index.html"))}if(K.isDirectory()){const E=M.readdirSync(B,{withFileTypes:!0}).map((H)=>{let Q="Unknown",S=0;if(H.isDirectory()){if(Q="Directory",S=3,M.existsSync(N(H.name,"index.html")))Q="Website",S=4}if(H.isFile()){const Z=H.name.split(".").slice(1);if(!Z.length)Q="File";else Q=Z.join(".").toUpperCase()+" file";S=2}if(H.isSymbolicLink())Q="Symlink",S=1;return{name:H.name,type:Q,priority:S}});return new Response(R(E,z),{status:200,headers:new Headers({"Content-Type":"text/html"})})}else{if(K.mode&(M.constants.S_IRUSR|M.constants.S_IRGRP|M.constants.S_IROTH))return new Response(Bun.file(B));return new Response(z+": 403 Forbidden",{status:403})}}const U='<hr><a id="footer">Bunginx | Fast, lightweight, simple HTTP file server<br>Dreamnity inc. 2024</a><style>#footer{font-size:smaller;}#header{font-weight:bold;}#a{white-space:break-spaces;font-family:monospace}*{text-decoration:none}</style>'}var X;
